@inject WeatherApiClient WeatherApiClient
<h3>RunwayConditions</h3>

@if (_localMetar is not null && Airport is not null)
{
	<MudText>@_localMetar.RawText;</MudText>
	@foreach (var runway in Airport.RunwayEnds)
	{
		<MudCard>
			<MudCardContent>
				<MudText Typo="Typo.h6">@runway.Name</MudText>
				<MudText>@runway.TrueHeading</MudText>
				<MudText>Headwind = @runway.CalculateHeadwindComponent(_localMetar.Wind)</MudText>
				<MudText>Crosswind = @runway.CalculateCrosswindComponent(_localMetar.Wind)</MudText>
				<MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Style="@IconRotationString(runway)" />
			</MudCardContent>
		</MudCard>
	}
}

@code {
	[Parameter, EditorRequired]
	public Airport? Airport { get; set; }

	private Metar? _localMetar { get; set; }

	//protected override async Task OnInitializedAsync()
	//{
	//	await FetchAndUpdatedMetar();
	//}

	protected override async Task OnParametersSetAsync()
	{
		await FetchAndUpdatedMetar();
	}

	private async Task FetchAndUpdatedMetar()
	{
		if (Airport is not null)
		{
			_localMetar = await WeatherApiClient.GetMetar(Airport);
		}
		StateHasChanged();
	}

	private string IconRotationString(RunwayEnd runway)
	{
		if (runway.TrueHeading is null || _localMetar is null || _localMetar.Wind is null)
		{
			return string.Empty;
		}
		else
		{
			var offset = _localMetar.Wind.DirectionTrueDegrees - (int)runway.TrueHeading;
			return $"transform: rotate({offset}deg);";
		}
	}
}